from kivy.clock import Clock
from kivy.properties import StringProperty, ObjectProperty, ListProperty
from kivymd.app import MDApp
from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.button import MDRaisedButton
# from kivymd.uix.expansionpanel import MDExpansionPanel, MDExpansionPanelThreeLine, MDExpansionPanelOneLine
from kivymd.uix.list import OneLineListItem, OneLineAvatarIconListItem, ILeftBodyTouch, IRightBodyTouch, MDList
from kivymd.uix.navigationdrawer import MDNavigationDrawer, MDNavigationDrawerItem, MDNavigationDrawerMenu
from kivymd.uix.selectioncontrol import MDCheckbox
from kivy.properties import DictProperty
from kivymd.utils import asynckivy

from Utility.komga_server_conn import ComicServerConn
from View.Widgets.customexpansionpanel import CustomeMDExpansionPanel, CustomeMDExpansionPanelOneLine


class MyMDExpansionPanel(CustomeMDExpansionPanel):
    pid = StringProperty("MDExpanis")

    def __init__(self, **kwargs):
        super(MyMDExpansionPanel, self).__init__(**kwargs)

    # def on_open(self, *args):
    #     screen = MDApp.get_running_app().manager_screens.current_screen
    #     if screen.filter_type == "Series List":
    #         for child in MDApp.get_running_app().filter_nav_drawer.children:
    #             print(f"{child.ids}")
    #
    # def on_close(self, *args):
    #     screen = MDApp.get_running_app().manager_screens.current_screen
    #     if screen.filter_type == "Series List":
    #         for child in MDApp.get_running_app().filter_nav_drawer.walk():
    #             print(f"{child.ids}")


class ReadProgressPanel(MDBoxLayout):
    def __init__(self, **kwargs):
        super(ReadProgressPanel, self).__init__(**kwargs)
        filter_menu_items = ['Unread', 'In Progress', 'Read', 'Complete']
        for i in filter_menu_items:
            self.ids.pub_list.add_widget(
                ListItemWithCheckbox(text=f"{i}", check_box_value=f"{i}")
            )


class PublisherPanel(MDBoxLayout):
    def __init__(self, **kwargs):
        super(PublisherPanel, self).__init__(**kwargs)
        filter_menu_items = ['Antarctic Press', 'Archaia', 'Cartoon Books', 'Crusade', 'Dark Horse Comics', 'DC Comics',
                             'Dynamite Entertainment', 'Eaglemoss Publications', 'Ediciones Zinco',
                             'Editorial Televisa', 'Fantagraphics', 'Heroic Publishing', 'IDW Publishing', 'Image',
                             'Jet City Comics', 'London Night Studios', 'Marvel', 'Marvel Comics', 'Maximum Press',
                             'Oni Press', 'Scholastic Book Services', 'Star Reach Publications', 'Timely',
                             'Titan Comics', 'Top Cow']
        for i in filter_menu_items:
            self.ids.pub_list.add_widget(
                ListItemWithCheckbox(text=f"{i}", check_box_value=f"{i}")
            )


class SortPanel(MDBoxLayout):
    def __init__(self, **kwargs):
        super(SortPanel, self).__init__(**kwargs)
        screen = MDApp.get_running_app().manager_screens.current_screen
        filter_menu_items = []
        if screen.name == "series comics screen":
            filter_menu_items = ["Number", "Date added", "Dare updated", "Release date", "Folder Name", "Books Count"]
        elif screen.name == "object list screen":
            filter_menu_items = ["Number", "Date added", "Release date", "File size", "Filename"]
        app = MDApp.get_running_app().manager_screens.current_screen
        app.sort_filter_list = filter_menu_items
        print(f"{filter_menu_items = }")
        for i in filter_menu_items:
            self.ids.pub_list.add_widget(
                SortTypeList(text=f"{i}", icon="", id=f"{i}")
            )

        # print(filter_menu_items)

        # def __got_publisher_data(results):
        #     filter_menu_items = ['Antarctic Press', 'Archaia', 'Cartoon Books', 'Crusade', 'Dark Horse Comics', 'DC Comics', 'Dynamite Entertainment', 'Eaglemoss Publications', 'Ediciones Zinco', 'Editorial Televisa', 'Fantagraphics', 'Heroic Publishing', 'IDW Publishing', 'Image', 'Jet City Comics', 'London Night Studios', 'Marvel', 'Marvel Comics', 'Maximum Press', 'Oni Press', 'Scholastic Book Services', 'Star Reach Publications', 'Timely', 'Titan Comics', 'Top Cow']
        #
        #     print(filter_menu_items)
        #     for i in filter_menu_items:
        #         self.ids.pub_list.add_widget(
        #             ListItemWithCheckbox(text=f"{i}", check_box_value=f"{i}")
        #         )
        #
        # fetch_data = ComicServerConn()
        # url_send = f"{MDApp.get_running_app().base_url}/api/v1/publishers"
        # fetch_data.get_server_data_callback(
        #     url_send,
        #     callback=lambda url_send, results: __got_publisher_data(results))


class MyMDNavigationDrawer(MDNavigationDrawer):
    filter_list = ListProperty()
    filter_dict = DictProperty()

    def __init__(self, **kwargs):
        super(MyMDNavigationDrawer, self).__init__(**kwargs)
        self.app = MDApp.get_running_app()
        self.publisher_list = None

    def filter_menu_build(self):
        self.filter_dict = {
            "Read Progress": {
                "content": ReadProgressPanel,
                "active": False,
                "id": "Read Progress",
                "index": 7
            },
            "Publisher": {
                "content": PublisherPanel,
                "active": False,
                "id": "Publisher",
                "index": 6
            },
            "Sort": {
                "content": SortPanel,
                "active": False,
                "id": "Sort",
                "index":5
            },
        }

        for i, filter_name in enumerate(self.filter_dict.keys()):
            # pass
            pid = self.filter_dict[filter_name]["id"]
            content_widget = self.filter_dict[filter_name]["content"]()
            t_index = self.filter_dict[filter_name]["index"]
            tmp_obj = MyMDExpansionPanel(
                id=pid,
                content=content_widget,
                panel_cls=CustomeMDExpansionPanelOneLine(
                    text=filter_name,

                ),
            )
            self.ids.filter_nav_drawer.ids.menu.add_widget(tmp_obj, index=t_index)
        apply_button = ApplyFilterButton(text="Apply Filter")
        self.ids.filter_nav_drawer.ids.menu.add_widget(apply_button,index=27)


    '''
            MDNavigationDrawerHeader:
                title: "Filter"
                title_color: "#4a4939"
                spacing: "4dp"
                padding: "12dp", 0, 0, "56dp"
            ApplyFilterButton:
                text:"Apply Filter"
                id:apply_filter_button
                on_release:root.apply_filter()
    
    
    
    '''
    def screen_set(self):
        screen = MDApp.get_running_app().manager_screens.current_screen
        if screen.name == "series comics screen":
            use_list_filters = ["Read Progress", "Sort"]
            self.build_xp_panels(use_list_filters)
        elif screen.name == "object list screen":
            use_list_filters = ["Publisher", "Read Progress", "Sort"]
            self.build_xp_panels(use_list_filters)

    def build_xp_panels(self, use_list_filters):
        async def __build_xp_panels():
            store_objects = []
            store_id_list = []
            for child in self.ids.filter_nav_drawer.ids.menu.children:
                try:
                    print(f"{child.id = }")
                    if child.id not in use_list_filters or child.id == "Sort":
                        print(child.id)
                        if child.id =='':
                            pass

                        else:
                            store_objects.append(child)
                    else:
                        store_id_list.append(child.id)
                finally:
                    pass
            print(f"{store_objects =}")
            print(f"{store_id_list =}")
            self.ids.filter_nav_drawer.ids.menu.clear_widgets(children=store_objects)
            for i, filter_name in enumerate(self.filter_dict.keys()):
                for item in use_list_filters:
                    if self.filter_dict[filter_name]["id"] == item:
                        if self.filter_dict[filter_name]["id"] not in store_id_list or item == "Sort":
                            pid = self.filter_dict[filter_name]["id"]
                            content_widget = self.filter_dict[filter_name]["content"]()
                            t_index = self.filter_dict[filter_name]["index"]
                            tmp_obj = MyMDExpansionPanel(
                                id=pid,
                                content=content_widget,
                                panel_cls=CustomeMDExpansionPanelOneLine(
                                    text=filter_name,
                                ),
                            )
                            self.ids.filter_nav_drawer.ids.menu.add_widget(tmp_obj, index=t_index)
        asynckivy.start(__build_xp_panels())

    def apply_filter(self):
        list_my_widgets = ["Publisher"]
        for i, filter_name in enumerate(self.filter_dict.keys()):
            if self.filter_dict[filter_name]["id"] == "Read Progress":
                pid = self.filter_dict[filter_name]["id"]
                content_widget = self.filter_dict[filter_name]["content"]
                tmp_obj = MyMDExpansionPanel(
                    id=pid,
                    content=content_widget(),
                    panel_cls=CustomeMDExpansionPanelOneLine(
                        text=filter_name,

                    ),
                )
                self.ids.filter_nav_drawer.ids.menu.add_widget(tmp_obj, index=2)
        # for child in self.ids.filter_nav_drawer.ids.menu.children:
        #     try:
        #         if child.id == "Publisher":
        #             self.ids.filter_nav_drawer.ids.menu.remove_widget(child)
        #     except:
        #         pass
        # for i, filter_name in enumerate(self.filter_dict.keys()):
        #     if self.filter_dict[filter_name]["id"] in list_my_widgets:
        #         pid = self.filter_dict[filter_name]["id"]
        #         content_widget = self.filter_dict[filter_name]["content"]
        #         tmp_obj = MyMDExpansionPanel(
        #             id=pid,
        #             content=content_widget(),
        #             panel_cls=CustomeMDExpansionPanelOneLine(
        #                 text=filter_name,
        #
        #             ),
        #         )
        #         self.ids.filter_nav_drawer.ids.menu.add_widget(tmp_obj,0)
        # screen = MDApp.get_running_app().manager_screens.current_screen
        # filter_type = screen.filter_type
        # if filter_type == "Series List":
        #     screen.get_server_lists(new_page_num=int(screen.current_page))


class ListItemWithCheckbox(OneLineAvatarIconListItem):
    """Custom list item."""
    icon = StringProperty("")
    check_box_value = StringProperty()

    def check_box_active(self, check_box_value):
        MDApp.get_running_app().filter_publisher_list.append(check_box_value)
        print(MDApp.get_running_app().filter_publisher_list)


class LeftCheckbox(ILeftBodyTouch, MDCheckbox):
    """Custom right container."""


class RightCheckbox(IRightBodyTouch, MDCheckbox):
    '''Custom right container.'''


class SortTypeList(OneLineAvatarIconListItem):
    def __init__(self, **kwargs):
        super(SortTypeList, self).__init__(**kwargs)

    id = StringProperty()
    what_chevron = StringProperty()
    icon = StringProperty()

    def set_sort(self):
        if self.what_chevron == "down":
            self.what_chevron = "up"
        else:
            self.what_chevron = "down"
        for child in self.parent.children:
            if child.id != self.id:
                child.what_chevron = ""

class ApplyFilterButton(MDRaisedButton):
    def __init__(self, **kwargs):
        super(ApplyFilterButton, self).__init__(**kwargs)
    def on_press(self):
        MDApp.get_running_app().filter_nav_drawer.apply_filter()